// AUTOGENERATED CODE - Do not modify by hand
// Generated by onrpcgen

// XDR Abstract Syntax Tree definition - a binary interchange format for XDR specifications
package ast

import (
	"encoding"
	"errors"
	"fmt"
	"strconv"
)

// Binary magic: the `magic` field of the `specification` should be set to this value
const XDR_BIN_MAGIC = 0x895844520D0A1A0A

// Root object of a specification
type Specification struct {
	// Magic number: set to XDR_BIN_MAGIC
	Magic uint64 `json:"magic"`
	// Spec attributes (set using pragma directives)
	Attributes Attributes `json:"attributes"`
	// List of all definitions
	Definitions []*Definition `json:"definitions"`
}

// An attribute of an object
type Attribute struct {
	Name  string    `json:"name"`
	Value *Constant `json:"value"`
}

// A set of attributes
type Attributes map[string]*Constant

// The kind of a definition
type DefinitionKind uint32

const (
	DEFINITION_KIND_TYPE     DefinitionKind = 0
	DEFINITION_KIND_CONSTANT DefinitionKind = 1
)

var xDefinitionKindValToStr = map[DefinitionKind]string{
	DEFINITION_KIND_TYPE:     "DEFINITION_KIND_TYPE",     // 0
	DEFINITION_KIND_CONSTANT: "DEFINITION_KIND_CONSTANT", // 1
}

var xDefinitionKindStrToVal = map[string]DefinitionKind{
	"DEFINITION_KIND_TYPE":     DEFINITION_KIND_TYPE,
	"DEFINITION_KIND_CONSTANT": DEFINITION_KIND_CONSTANT,
}

func (v DefinitionKind) String() string {
	if s, ok := xDefinitionKindValToStr[v]; ok {
		return s
	}
	return strconv.Itoa(int(v))
}

func (v DefinitionKind) MarshalText() ([]byte, error) {
	if s, ok := xDefinitionKindValToStr[v]; ok {
		return []byte(s), nil
	}
	return nil, errors.New("Invalid enum value")
}

func (v *DefinitionKind) UnmarshalText(buf []byte) error {
	if nv, ok := xDefinitionKindStrToVal[string(buf)]; ok {
		*v = nv
		return nil
	}
	return errors.New("Invalid enum value")
}

func (_ DefinitionKind) ValidEnum(v int32) bool {
	_, ok := xDefinitionKindValToStr[DefinitionKind(v)]
	return ok
}

var (
	_ fmt.Stringer             = DefinitionKind(0)
	_ encoding.TextMarshaler   = DefinitionKind(0)
	_ encoding.TextUnmarshaler = new(DefinitionKind)
)

// Definition_Body is union definition.body
type Definition_Body struct {
	Kind DefinitionKind `json:"kind"`
	// Body, for type definitions
	Type *Type `json:"type,omitempty"`
	// Body, for constant definitions
	Constant *Constant `json:"constant,omitempty"`
}

func (u *Definition_Body) UnionDiscriminant() interface{} {
	return u.Kind
}

func (u *Definition_Body) UnionValue() (interface{}, error) {
	switch u.Kind {
	case DEFINITION_KIND_CONSTANT:
		return u.Constant, nil
	case DEFINITION_KIND_TYPE:
		return u.Type, nil
	default:
		return nil, errors.New("Invalid discriminant")
	}
}

func (u *Definition_Body) SwitchFieldName() string {
	return "Kind"
}

func (u *Definition_Body) ArmForSwitch(sw uint32) (string, bool) {
	switch sw {
	default:
		return "", false
	}
}

// A top-level definition
type Definition struct {
	// The name of the definition
	Name string `json:"name"`
	// The attributes of the definition
	Attributes Attributes       `json:"attributes"`
	Body       *Definition_Body `json:"body"`
}

// The kind of the type
type TypeKind uint32

const (
	TYPE_VOID           TypeKind = 0
	TYPE_BOOL           TypeKind = 1
	TYPE_INT            TypeKind = 2
	TYPE_UNSIGNED_INT   TypeKind = 3
	TYPE_HYPER          TypeKind = 4
	TYPE_UNSIGNED_HYPER TypeKind = 5
	TYPE_FLOAT          TypeKind = 6
	TYPE_DOUBLE         TypeKind = 7
	TYPE_STRING         TypeKind = 8
	TYPE_OPAQUE         TypeKind = 9
	TYPE_ENUM           TypeKind = 10
	TYPE_STRUCT         TypeKind = 11
	TYPE_UNION          TypeKind = 12
	TYPE_REF            TypeKind = 13
	TYPE_TYPEDEF        TypeKind = 14
)

var xTypeKindValToStr = map[TypeKind]string{
	TYPE_VOID:           "TYPE_VOID",           // 0
	TYPE_BOOL:           "TYPE_BOOL",           // 1
	TYPE_INT:            "TYPE_INT",            // 2
	TYPE_UNSIGNED_INT:   "TYPE_UNSIGNED_INT",   // 3
	TYPE_HYPER:          "TYPE_HYPER",          // 4
	TYPE_UNSIGNED_HYPER: "TYPE_UNSIGNED_HYPER", // 5
	TYPE_FLOAT:          "TYPE_FLOAT",          // 6
	TYPE_DOUBLE:         "TYPE_DOUBLE",         // 7
	TYPE_STRING:         "TYPE_STRING",         // 8
	TYPE_OPAQUE:         "TYPE_OPAQUE",         // 9
	TYPE_ENUM:           "TYPE_ENUM",           // 10
	TYPE_STRUCT:         "TYPE_STRUCT",         // 11
	TYPE_UNION:          "TYPE_UNION",          // 12
	TYPE_REF:            "TYPE_REF",            // 13
	TYPE_TYPEDEF:        "TYPE_TYPEDEF",        // 14
}

var xTypeKindStrToVal = map[string]TypeKind{
	"TYPE_VOID":           TYPE_VOID,
	"TYPE_BOOL":           TYPE_BOOL,
	"TYPE_INT":            TYPE_INT,
	"TYPE_UNSIGNED_INT":   TYPE_UNSIGNED_INT,
	"TYPE_HYPER":          TYPE_HYPER,
	"TYPE_UNSIGNED_HYPER": TYPE_UNSIGNED_HYPER,
	"TYPE_FLOAT":          TYPE_FLOAT,
	"TYPE_DOUBLE":         TYPE_DOUBLE,
	"TYPE_STRING":         TYPE_STRING,
	"TYPE_OPAQUE":         TYPE_OPAQUE,
	"TYPE_ENUM":           TYPE_ENUM,
	"TYPE_STRUCT":         TYPE_STRUCT,
	"TYPE_UNION":          TYPE_UNION,
	"TYPE_REF":            TYPE_REF,
	"TYPE_TYPEDEF":        TYPE_TYPEDEF,
}

func (v TypeKind) String() string {
	if s, ok := xTypeKindValToStr[v]; ok {
		return s
	}
	return strconv.Itoa(int(v))
}

func (v TypeKind) MarshalText() ([]byte, error) {
	if s, ok := xTypeKindValToStr[v]; ok {
		return []byte(s), nil
	}
	return nil, errors.New("Invalid enum value")
}

func (v *TypeKind) UnmarshalText(buf []byte) error {
	if nv, ok := xTypeKindStrToVal[string(buf)]; ok {
		*v = nv
		return nil
	}
	return errors.New("Invalid enum value")
}

func (_ TypeKind) ValidEnum(v int32) bool {
	_, ok := xTypeKindValToStr[TypeKind(v)]
	return ok
}

var (
	_ fmt.Stringer             = TypeKind(0)
	_ encoding.TextMarshaler   = TypeKind(0)
	_ encoding.TextUnmarshaler = new(TypeKind)
)

// Definition of a type
type Type struct {
	Kind       TypeKind     `json:"kind"`
	EnumSpec   *EnumSpec    `json:"enum_spec,omitempty"`
	StructSpec *StructSpec  `json:"struct_spec,omitempty"`
	UnionSpec  *UnionSpec   `json:"union_spec,omitempty"`
	Ref        string       `json:"ref,omitempty"`
	TypeDef    *Declaration `json:"type_def,omitempty"`
}

func (u *Type) UnionDiscriminant() interface{} {
	return u.Kind
}

func (u *Type) UnionValue() (interface{}, error) {
	switch u.Kind {
	case TYPE_BOOL:
		return nil, nil
	case TYPE_DOUBLE:
		return nil, nil
	case TYPE_ENUM:
		return u.EnumSpec, nil
	case TYPE_FLOAT:
		return nil, nil
	case TYPE_HYPER:
		return nil, nil
	case TYPE_INT:
		return nil, nil
	case TYPE_OPAQUE:
		return nil, nil
	case TYPE_REF:
		return u.Ref, nil
	case TYPE_STRING:
		return nil, nil
	case TYPE_STRUCT:
		return u.StructSpec, nil
	case TYPE_TYPEDEF:
		return u.TypeDef, nil
	case TYPE_UNION:
		return u.UnionSpec, nil
	case TYPE_UNSIGNED_HYPER:
		return nil, nil
	case TYPE_UNSIGNED_INT:
		return nil, nil
	case TYPE_VOID:
		return nil, nil
	default:
		return nil, errors.New("Invalid discriminant")
	}
}

func (u *Type) SwitchFieldName() string {
	return "Kind"
}

func (u *Type) ArmForSwitch(sw uint32) (string, bool) {
	switch sw {
	default:
		return "", false
	}
}

// Set of all options
type EnumSpec_Options struct {
	// Name of the enumerant
	Name string `json:"name"`
	// Value of the enumerant
	Value uint32 `json:"value"`
}

// Definition of an enum
type EnumSpec struct {
	// Set of all options
	Options []*EnumSpec_Options `json:"options"`
}

// How a declaration modifies its type
type DeclarationModifier uint32

const (
	DECLARATION_MODIFIER_NONE      DeclarationModifier = 0
	DECLARATION_MODIFIER_OPTIONAL  DeclarationModifier = 1
	DECLARATION_MODIFIER_FIXED     DeclarationModifier = 2
	DECLARATION_MODIFIER_FLEXIBLE  DeclarationModifier = 3
	DECLARATION_MODIFIER_UNBOUNDED DeclarationModifier = 5
)

var xDeclarationModifierValToStr = map[DeclarationModifier]string{
	DECLARATION_MODIFIER_NONE:      "DECLARATION_MODIFIER_NONE",      // 0
	DECLARATION_MODIFIER_OPTIONAL:  "DECLARATION_MODIFIER_OPTIONAL",  // 1
	DECLARATION_MODIFIER_FIXED:     "DECLARATION_MODIFIER_FIXED",     // 2
	DECLARATION_MODIFIER_FLEXIBLE:  "DECLARATION_MODIFIER_FLEXIBLE",  // 3
	DECLARATION_MODIFIER_UNBOUNDED: "DECLARATION_MODIFIER_UNBOUNDED", // 5
}

var xDeclarationModifierStrToVal = map[string]DeclarationModifier{
	"DECLARATION_MODIFIER_NONE":      DECLARATION_MODIFIER_NONE,
	"DECLARATION_MODIFIER_OPTIONAL":  DECLARATION_MODIFIER_OPTIONAL,
	"DECLARATION_MODIFIER_FIXED":     DECLARATION_MODIFIER_FIXED,
	"DECLARATION_MODIFIER_FLEXIBLE":  DECLARATION_MODIFIER_FLEXIBLE,
	"DECLARATION_MODIFIER_UNBOUNDED": DECLARATION_MODIFIER_UNBOUNDED,
}

func (v DeclarationModifier) String() string {
	if s, ok := xDeclarationModifierValToStr[v]; ok {
		return s
	}
	return strconv.Itoa(int(v))
}

func (v DeclarationModifier) MarshalText() ([]byte, error) {
	if s, ok := xDeclarationModifierValToStr[v]; ok {
		return []byte(s), nil
	}
	return nil, errors.New("Invalid enum value")
}

func (v *DeclarationModifier) UnmarshalText(buf []byte) error {
	if nv, ok := xDeclarationModifierStrToVal[string(buf)]; ok {
		*v = nv
		return nil
	}
	return errors.New("Invalid enum value")
}

func (_ DeclarationModifier) ValidEnum(v int32) bool {
	_, ok := xDeclarationModifierValToStr[DeclarationModifier(v)]
	return ok
}

var (
	_ fmt.Stringer             = DeclarationModifier(0)
	_ encoding.TextMarshaler   = DeclarationModifier(0)
	_ encoding.TextUnmarshaler = new(DeclarationModifier)
)

// Modifier of the type
type Declaration_Modifier struct {
	Kind DeclarationModifier `json:"kind"`
	Size uint32              `json:"size,omitempty"`
}

func (u *Declaration_Modifier) UnionDiscriminant() interface{} {
	return u.Kind
}

func (u *Declaration_Modifier) UnionValue() (interface{}, error) {
	switch u.Kind {
	case DECLARATION_MODIFIER_FIXED:
		return u.Size, nil
	case DECLARATION_MODIFIER_FLEXIBLE:
		return u.Size, nil
	case DECLARATION_MODIFIER_NONE:
		return nil, nil
	case DECLARATION_MODIFIER_OPTIONAL:
		return nil, nil
	case DECLARATION_MODIFIER_UNBOUNDED:
		return nil, nil
	default:
		return nil, errors.New("Invalid discriminant")
	}
}

func (u *Declaration_Modifier) SwitchFieldName() string {
	return "Kind"
}

func (u *Declaration_Modifier) ArmForSwitch(sw uint32) (string, bool) {
	switch sw {
	default:
		return "", false
	}
}

// Field declaration
type Declaration struct {
	// Type of the field
	Type *Type `json:"type"`
	// Name of the field
	Name string `json:"name"`
	// Modifier of the type
	Modifier *Declaration_Modifier `json:"modifier"`
	// Field attributes
	Attributes Attributes `json:"attributes"`
}

// Definition of an enum
type StructSpec struct {
	// Set of struct members
	Members []*Declaration `json:"members"`
}

// Mapping from values to union member. `member` is the index of the member in `members`
type UnionSpec_Options struct {
	Value  uint32 `json:"value"`
	Member uint32 `json:"member"`
}

// Definition of a union
type UnionSpec struct {
	// Discriminant field
	Discriminant *Declaration `json:"discriminant"`
	// Set of union member fields
	Members []*Declaration `json:"members"`
	// Mapping from values to union member. `member` is the index of the member in `members`
	Options map[uint32]uint32 `json:"options"`
	// If a default member is present, defines it
	DefaultMember *uint32 `xdr:"opt" json:"default_member,omitempty"`
}

// Type of a constant. These are a subset of XDR types
type ConstantKind uint32

const (
	CONST_BOOL    ConstantKind = 0
	CONST_POS_INT ConstantKind = 1
	CONST_NEG_INT ConstantKind = 2
	CONST_FLOAT   ConstantKind = 3
	CONST_STRING  ConstantKind = 4
	CONST_ENUM    ConstantKind = 5
)

var xConstantKindValToStr = map[ConstantKind]string{
	CONST_BOOL:    "CONST_BOOL",    // 0
	CONST_POS_INT: "CONST_POS_INT", // 1
	CONST_NEG_INT: "CONST_NEG_INT", // 2
	CONST_FLOAT:   "CONST_FLOAT",   // 3
	CONST_STRING:  "CONST_STRING",  // 4
	CONST_ENUM:    "CONST_ENUM",    // 5
}

var xConstantKindStrToVal = map[string]ConstantKind{
	"CONST_BOOL":    CONST_BOOL,
	"CONST_POS_INT": CONST_POS_INT,
	"CONST_NEG_INT": CONST_NEG_INT,
	"CONST_FLOAT":   CONST_FLOAT,
	"CONST_STRING":  CONST_STRING,
	"CONST_ENUM":    CONST_ENUM,
}

func (v ConstantKind) String() string {
	if s, ok := xConstantKindValToStr[v]; ok {
		return s
	}
	return strconv.Itoa(int(v))
}

func (v ConstantKind) MarshalText() ([]byte, error) {
	if s, ok := xConstantKindValToStr[v]; ok {
		return []byte(s), nil
	}
	return nil, errors.New("Invalid enum value")
}

func (v *ConstantKind) UnmarshalText(buf []byte) error {
	if nv, ok := xConstantKindStrToVal[string(buf)]; ok {
		*v = nv
		return nil
	}
	return errors.New("Invalid enum value")
}

func (_ ConstantKind) ValidEnum(v int32) bool {
	_, ok := xConstantKindValToStr[ConstantKind(v)]
	return ok
}

var (
	_ fmt.Stringer             = ConstantKind(0)
	_ encoding.TextMarshaler   = ConstantKind(0)
	_ encoding.TextUnmarshaler = new(ConstantKind)
)

// Constant is union constant
type Constant struct {
	Type    ConstantKind `json:"type"`
	VBool   bool         `json:"v_bool,omitempty"`
	VPosInt uint64       `json:"v_pos_int,omitempty"`
	VNegInt uint64       `json:"v_neg_int,omitempty"`
	VFloat  float64      `json:"v_float,omitempty"`
	VString string       `json:"v_string,omitempty"`
	VEnum   uint32       `json:"v_enum,omitempty"`
}

func (u *Constant) UnionDiscriminant() interface{} {
	return u.Type
}

func (u *Constant) UnionValue() (interface{}, error) {
	switch u.Type {
	case CONST_BOOL:
		return u.VBool, nil
	case CONST_ENUM:
		return u.VEnum, nil
	case CONST_FLOAT:
		return u.VFloat, nil
	case CONST_NEG_INT:
		return u.VNegInt, nil
	case CONST_POS_INT:
		return u.VPosInt, nil
	case CONST_STRING:
		return u.VString, nil
	default:
		return nil, errors.New("Invalid discriminant")
	}
}

func (u *Constant) SwitchFieldName() string {
	return "Type"
}

func (u *Constant) ArmForSwitch(sw uint32) (string, bool) {
	switch sw {
	default:
		return "", false
	}
}

// Dummy type assertions - added to ensure that no errors are generated
// because we didn't use one of our imports
var (
	_ encoding.TextMarshaler = nil
	_                        = errors.New
	_ fmt.Stringer           = nil
	_                        = strconv.ErrSyntax
)
